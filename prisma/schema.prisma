// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientGalleries   ClientGallery[]
  orders            Order[]
  inspectionReports InspectionReport[]

  @@map("users")
}

model Photo {
  id             String      @id @default(cuid())
  filename       String
  title          String?
  description    String?
  category       PhotoCategory
  isPublic       Boolean     @default(false)
  storageUrl     String
  thumbnailUrl   String
  watermarkUrl   String?
  price          Float       @default(0)
  metadata       Json?       // General metadata
  inspectionData Json?       // Inspection-specific metadata (GPS, equipment used, findings)
  reportId       String?     // Optional link to inspection report
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  clientGalleries   ClientGalleryPhoto[]
  orderPhotos       OrderPhoto[]
  inspectionReport  InspectionReport?    @relation("InspectionPhotos", fields: [reportId], references: [id])

  @@map("photos")
}

model ClientGallery {
  id         String    @id @default(cuid())
  name       String
  accessCode String    @unique
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  clientId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  client User                   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photos ClientGalleryPhoto[]
  orders Order[]

  @@map("client_galleries")
}

model ClientGalleryPhoto {
  id        String @id @default(cuid())
  galleryId String
  photoId   String

  // Relations
  gallery ClientGallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  photo   Photo         @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([galleryId, photoId])
  @@map("client_gallery_photos")
}

model Order {
  id              String      @id @default(cuid())
  clientId        String
  galleryId       String
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  client        User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  gallery       ClientGallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  photos        OrderPhoto[]
  downloadLinks DownloadLink[]

  @@map("orders")
}

model OrderPhoto {
  id      String @id @default(cuid())
  orderId String
  photoId String
  price   Float

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([orderId, photoId])
  @@map("order_photos")
}

model DownloadLink {
  id        String    @id @default(cuid())
  orderId   String
  photoId   String
  url       String
  expiresAt DateTime
  createdAt DateTime  @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("download_links")
}

model Service {
  id              String          @id @default(cuid())
  name            String
  description     String
  category        ServiceCategory
  sessionDuration String?         // e.g., "1 hour", "30 minutes", "3 hours"
  locationCount   Int?            // number of locations included
  basePrice       Float
  features        String[]
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("services")
}

model InspectionReport {
  id           String            @id @default(cuid())
  propertyType PropertyType
  address      String
  inspectionDate DateTime
  findings     Json?             // Structured findings data
  status       InspectionStatus  @default(IN_PROGRESS)
  clientId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  client User   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photos Photo[] @relation("InspectionPhotos")

  @@map("inspection_reports")
}

model Testimonial {
  id          String   @id @default(cuid())
  clientName  String
  serviceType String
  content     String
  rating      Int?     @db.SmallInt
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("testimonials")
}

model QuoteRequest {
  id                 String           @id @default(cuid())
  name               String           @db.VarChar(100)
  email              String           @db.VarChar(255)
  phone              String?          @db.VarChar(20)
  serviceType        QuoteServiceType
  sessionType        SessionType?     // For photography sessions
  projectDescription String           @db.Text // Allow longer descriptions
  location           String           @db.VarChar(255)
  preferredDate      DateTime?
  alternateDate      DateTime?
  timeline           String           @db.VarChar(100)
  budget             BudgetRange?
  specialRequirements String?         @db.Text // Allow longer requirements
  petDetails         String?          @db.Text // Allow longer pet details
  status             QuoteStatus      @default(NEW)
  adminNotes         String?          @db.Text // Allow longer admin notes
  quotedAmount       Decimal?         @db.Decimal(10, 2) // Better for currency
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Indexes for common queries
  @@index([status])
  @@index([serviceType])
  @@index([createdAt])
  @@index([email])
  @@map("quote_requests")
}

// Enums
enum Role {
  CLIENT
  ADMIN
}

enum PhotoCategory {
  COMMERCIAL
  RESIDENTIAL
  REAL_ESTATE
  EVENT
  OTHER
  COMMERCIAL_INSPECTION
  RESIDENTIAL_INSPECTION
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
}

enum ServiceCategory {
  INSPECTION
  PHOTOGRAPHY
  CINEMATOGRAPHY
}

enum PropertyType {
  COMMERCIAL
  RESIDENTIAL
  INDUSTRIAL
  MIXED_USE
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  DELIVERED
}

enum QuoteStatus {
  NEW
  REVIEWED
  QUOTED
  ACCEPTED
  DECLINED
  CLOSED
}

enum QuoteServiceType {
  COMMERCIAL_INSPECTION
  RESIDENTIAL_INSPECTION
  REAL_ESTATE_PHOTOGRAPHY
  EVENT_PHOTOGRAPHY
  AERIAL_CINEMATOGRAPHY
  CONSTRUCTION_PROGRESS
  CUSTOM_PROJECT
}

enum SessionType {
  FAMILY_PORTRAIT_1HR
  FAMILY_PORTRAIT_3HR
  COUPLE_SESSION
  INDIVIDUAL_SESSION
  PET_PHOTOGRAPHY
  EVENT_COVERAGE
  PROPERTY_INSPECTION
  AERIAL_SESSION
}

enum BudgetRange {
  UNDER_500
  RANGE_500_1000
  RANGE_1000_2500
  RANGE_2500_5000
  OVER_5000
  CUSTOM
}
